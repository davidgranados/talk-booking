name: CI

on:
  push:
    branches:
      - main

env:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY: ghcr.io
  USERNAME: davidgranados
  IMAGE_NAME: talk-booking
  IMAGE_TAG: latest

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-python-ci-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    env:
      DOCKER_DRIVER: overlay2
      DOCKER_TLS_CERTDIR: "/certs"
      REGISTRY: ghcr.io
      USERNAME: davidgranados
      IMAGE_NAME: talk-booking
      IMAGE_TAG: latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ci_cd/python/
          file: ci_cd/python/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
  service-talk-booking-code-quality:
    needs: build-python-ci-image
    name: Code Quality
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/davidgranados/talk-booking:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python environment
        run: |
          cd services/talk_booking/
          poetry install

      - name: Run Flake8
        run: |
          poetry run flake8 .

      - name: Run Black
        run: |
          poetry run black . --check

      - name: Run Isort
        run: |
          poetry run isort . --check-only --profile black

  service-talk-booking-tests:
    needs: build-python-ci-image
    name: Run Tests
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/davidgranados/talk-booking:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python environment
        run: |
          cd services/talk_booking/
          poetry install

      - name: Run Tests
        run: |
          poetry run python -m pytest --junitxml=report.xml --cov=./ --cov-report=xml tests/unit tests/integration

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
